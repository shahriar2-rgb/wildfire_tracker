{"version":3,"sources":["components/LocationMarker.js","components/LocationinfoBox.js","components/Map.js","components/Spinner.gif","components/Loader.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","className","icon","locationIcon","LocationInfoBox","info","id","title","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","categories","geometries","coordinates","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAWeA,EARQ,SAAC,GAAuB,EAArBC,IAAqB,EAAjBC,IAAkB,IAAbC,EAAY,EAAZA,QAC/B,OACI,qBAAKC,UAAW,kBAAkBD,QAASA,EAA3C,SACI,cAAC,OAAD,CAAME,KAASC,IAAcF,UAAU,qBCQpCG,EAZS,SAAC,GAAa,IAAXC,EAAU,EAAVA,KACvB,OACI,sBAAKJ,UAAU,gBAAf,UACI,qDACA,+BACI,qCAAO,iCAASI,EAAKC,KAArB,OACA,wCAAU,iCAASD,EAAKE,QAAxB,cCFVC,EAAM,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,KAAS,EACCC,mBAAS,MADV,mBAChCC,EADgC,KAClBC,EADkB,KAEjCC,EAAUN,EAAUO,KAAI,SAAAC,GAC1B,OAA0B,IAAvBA,EAAGC,WAAW,GAAGZ,GACT,cAAC,EAAD,CAAgBR,IAAOmB,EAAGE,WAAW,GAAGC,YAAY,GAAIrB,IAAKkB,EAAGE,WAAW,GAAGC,YAAY,GAAIpB,QAAU,kBAAMc,EAAgB,CAAER,GAAGW,EAAGX,GAAIC,MAAOU,EAAGV,WAExJ,QAEX,OACI,sBAAKN,UAAU,MAAf,UACI,cAAC,IAAD,CACIoB,iBAAkB,CAAEC,IAAM,2CAC1BC,cAAiBb,EACjBc,YAAgBb,EAHpB,SAKKI,IAEJF,GAAgB,cAAC,EAAD,CAAiBR,KAAMQ,QAKpDL,EAAIiB,aAAc,CACdf,OAAO,CACHZ,IAAI,QACJC,IAAI,QAERY,KAAO,GAGIH,QCpCA,MAA0B,oCCY1BkB,EAVA,WACX,OACI,sBAAKzB,UAAU,SAAf,UACI,qBAAK0B,IAAKC,EAASC,IAAI,YACvB,uDCKGC,EARA,WACX,OACI,wBAAQ7B,UAAW,SAAnB,SACI,+BAAI,cAAC,OAAD,CAAMC,KAAMC,MAAhB,0CCuBG4B,MAzBf,WAAgB,IAAD,EACoBnB,mBAAS,IAD7B,mBACNH,EADM,KACKuB,EADL,OAEgBpB,mBAAS,EAAC,IAF1B,mBAENqB,EAFM,KAEGC,EAFH,KAiBb,OAbAC,qBAAU,YACS,uCAAE,gCAAAC,EAAA,6DACjBF,GAAW,GADM,SAECG,MAAM,mDAFP,cAEXC,EAFW,gBAGQA,EAAIC,OAHZ,gBAGTC,EAHS,EAGTA,OAERR,EAAaQ,GACbN,GAAW,GANM,4CAAF,qDAQjBO,KAEA,IAGA,gCACE,cAAC,EAAD,IACER,EAAyC,cAAC,EAAD,IAA/B,cAAC,EAAD,CAAKxB,UAAWA,QCZnBiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a2955aed.chunk.js","sourcesContent":["import { Icon } from \"@iconify/react\"\nimport locationIcon from \"@iconify/icons-mdi/fire-alert\"\n\nconst LocationMarker = ({ lat,lng, onClick}) =>{\n    return (\n        <div className= \"location-marker\" onClick={onClick}>\n            <Icon icon = { locationIcon} className=\"location-icon\" />\n        </div>\n    )\n}\n\nexport default LocationMarker","import LocationMarker from \"./LocationMarker\"\n\nconst LocationInfoBox = ({ info }) =>{\n    return(\n        <div className=\"location-info\">\n            <h2>Event Location Info</h2>\n            <ul>\n                <li>ID:<strong>{info.id}</strong> </li>\n                <li>TITLE:<strong>{info.title}</strong> </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default LocationInfoBox","import { useState } from \"react\"\nimport GoogleMapReact from 'google-map-react'\nimport LocationMarker from \"./LocationMarker\"\nimport LocationInfoBox from \"./LocationinfoBox\"\n\n\nconst Map = ({ eventData, center, zoom}) =>{\n    const [locationInfo, setLocationInfo] = useState(null)\n    const markers = eventData.map(ev =>{\n        if(ev.categories[0].id ===8){\n            return <LocationMarker lat = {ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]} onClick= {() => setLocationInfo({ id:ev.id, title: ev.title })}/>\n        }\n        return null\n    })\n    return (\n        <div className=\"map\">\n            <GoogleMapReact\n                bootstrapURLKeys={{ key : \"AIzaSyDnB8lpFykXef9orGUgsWC839YJRcazeII\"}}\n                defaultCenter= { center}\n                defaultZoom = { zoom}\n            >\n                {markers}\n            </GoogleMapReact>\n            {locationInfo && <LocationInfoBox info={locationInfo} />}\n        </div>\n    )\n}\n\nMap.defaultProps= {\n    center:{\n        lat:33.5731,\n        lng:7.5898\n    },\n    zoom : 6\n}\n\nexport default Map","export default __webpack_public_path__ + \"static/media/Spinner.f939def3.gif\";","import spinner from \"./Spinner.gif\"\n\nconst Loader = ()=>{\n    return(\n        <div className=\"loader\">\n            <img src={spinner} alt=\"Loading\" />\n            <h1>Fetching the Data</h1>\n        </div>\n    )\n}\n\n\nexport default Loader","import { Icon } from \"@iconify/react\"\nimport locationIcon from \"@iconify/icons-mdi/fire-alert\"\n\nconst Header = () =>{\n    return(\n        <header className= \"header\">\n            <h1><Icon icon={locationIcon} />Wildfire tracker (using NASA API)</h1>\n        </header>\n    )\n}\n\nexport default Header","import { useState, useEffect } from \"react\"\nimport Map from \"./components/Map\"\nimport Loader from \"./components/Loader\"\nimport Header from \"./components/Header\"\nfunction App() {\n  const [eventData, setEventData]= useState([])\n  const [loading, setLoading]= useState([false])\n  \n  useEffect(()=>{\n    const fetchEvents= async ()=>{\n      setLoading(true)\n      const res = await fetch(\"https://eonet.sci.gsfc.nasa.gov/api/v2.1/events\")\n      const { events } = await res.json()\n    \n      setEventData(events)\n      setLoading(false)\n    }\n    fetchEvents()\n\n  },[])\n  \n  return (\n    <div>\n      <Header />\n      {!loading ? <Map eventData={eventData} />: <Loader />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}